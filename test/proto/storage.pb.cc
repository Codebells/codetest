// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/storage.proto

#include "proto/storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR StoragePullRequest::StoragePullRequest(
    ::_pbi::ConstantInitialized)
  : send_node_(nullptr)
  , recv_node_(nullptr)
  , epoch_id_(uint64_t{0u}){}
struct StoragePullRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoragePullRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoragePullRequestDefaultTypeInternal() {}
  union {
    StoragePullRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoragePullRequestDefaultTypeInternal _StoragePullRequest_default_instance_;
PROTOBUF_CONSTEXPR StoragePullResponse::StoragePullResponse(
    ::_pbi::ConstantInitialized)
  : txns_()
  , send_node_(nullptr)
  , recv_node_(nullptr)
  , epoch_id_(uint64_t{0u})
  , txn_num_(uint64_t{0u})
  , result_(0)
{}
struct StoragePullResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoragePullResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoragePullResponseDefaultTypeInternal() {}
  union {
    StoragePullResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoragePullResponseDefaultTypeInternal _StoragePullResponse_default_instance_;
PROTOBUF_CONSTEXPR StoragePushResponse::StoragePushResponse(
    ::_pbi::ConstantInitialized)
  : txns_()
  , send_node_(nullptr)
  , recv_node_(nullptr)
  , epoch_id_(uint64_t{0u})
  , txn_num_(uint64_t{0u})
  , result_(0)
{}
struct StoragePushResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoragePushResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoragePushResponseDefaultTypeInternal() {}
  union {
    StoragePushResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoragePushResponseDefaultTypeInternal _StoragePushResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2fstorage_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fstorage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fstorage_2eproto = nullptr;

const uint32_t TableStruct_proto_2fstorage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullRequest, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullRequest, send_node_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullRequest, recv_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, txn_num_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, txns_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, send_node_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, recv_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, txn_num_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, txns_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, send_node_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, recv_node_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::StoragePullRequest)},
  { 9, -1, -1, sizeof(::proto::StoragePullResponse)},
  { 21, -1, -1, sizeof(::proto::StoragePushResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_StoragePullRequest_default_instance_._instance,
  &::proto::_StoragePullResponse_default_instance_._instance,
  &::proto::_StoragePushResponse_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fstorage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023proto/storage.proto\022\005proto\032\027proto/tran"
  "saction.proto\032\020proto/node.proto\"f\n\022Stora"
  "gePullRequest\022\020\n\010epoch_id\030\001 \001(\004\022\036\n\tsend_"
  "node\030\002 \001(\0132\013.proto.Node\022\036\n\trecv_node\030\003 \001"
  "(\0132\013.proto.Node\"\271\001\n\023StoragePullResponse\022"
  "\035\n\006result\030\001 \001(\0162\r.proto.Result\022\020\n\010epoch_"
  "id\030\002 \001(\004\022\017\n\007txn_num\030\003 \001(\004\022 \n\004txns\030\004 \003(\0132"
  "\022.proto.Transaction\022\036\n\tsend_node\030\005 \001(\0132\013"
  ".proto.Node\022\036\n\trecv_node\030\006 \001(\0132\013.proto.N"
  "ode\"\271\001\n\023StoragePushResponse\022\035\n\006result\030\001 "
  "\001(\0162\r.proto.Result\022\020\n\010epoch_id\030\002 \001(\004\022\017\n\007"
  "txn_num\030\003 \001(\004\022 \n\004txns\030\004 \003(\0132\022.proto.Tran"
  "saction\022\036\n\tsend_node\030\005 \001(\0132\013.proto.Node\022"
  "\036\n\trecv_node\030\006 \001(\0132\013.proto.Nodeb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fstorage_2eproto_deps[2] = {
  &::descriptor_table_proto_2fnode_2eproto,
  &::descriptor_table_proto_2ftransaction_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2fstorage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fstorage_2eproto = {
    false, false, 559, descriptor_table_protodef_proto_2fstorage_2eproto,
    "proto/storage.proto",
    &descriptor_table_proto_2fstorage_2eproto_once, descriptor_table_proto_2fstorage_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_proto_2fstorage_2eproto::offsets,
    file_level_metadata_proto_2fstorage_2eproto, file_level_enum_descriptors_proto_2fstorage_2eproto,
    file_level_service_descriptors_proto_2fstorage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fstorage_2eproto_getter() {
  return &descriptor_table_proto_2fstorage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fstorage_2eproto(&descriptor_table_proto_2fstorage_2eproto);
namespace proto {

// ===================================================================

class StoragePullRequest::_Internal {
 public:
  static const ::proto::Node& send_node(const StoragePullRequest* msg);
  static const ::proto::Node& recv_node(const StoragePullRequest* msg);
};

const ::proto::Node&
StoragePullRequest::_Internal::send_node(const StoragePullRequest* msg) {
  return *msg->send_node_;
}
const ::proto::Node&
StoragePullRequest::_Internal::recv_node(const StoragePullRequest* msg) {
  return *msg->recv_node_;
}
void StoragePullRequest::clear_send_node() {
  if (GetArenaForAllocation() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
}
void StoragePullRequest::clear_recv_node() {
  if (GetArenaForAllocation() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
}
StoragePullRequest::StoragePullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.StoragePullRequest)
}
StoragePullRequest::StoragePullRequest(const StoragePullRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_send_node()) {
    send_node_ = new ::proto::Node(*from.send_node_);
  } else {
    send_node_ = nullptr;
  }
  if (from._internal_has_recv_node()) {
    recv_node_ = new ::proto::Node(*from.recv_node_);
  } else {
    recv_node_ = nullptr;
  }
  epoch_id_ = from.epoch_id_;
  // @@protoc_insertion_point(copy_constructor:proto.StoragePullRequest)
}

inline void StoragePullRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&send_node_)) + sizeof(epoch_id_));
}

StoragePullRequest::~StoragePullRequest() {
  // @@protoc_insertion_point(destructor:proto.StoragePullRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoragePullRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete send_node_;
  if (this != internal_default_instance()) delete recv_node_;
}

void StoragePullRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoragePullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StoragePullRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
  epoch_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoragePullRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epoch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Node send_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Node recv_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_recv_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoragePullRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StoragePullRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch_id = 1;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch_id(), target);
  }

  // .proto.Node send_node = 2;
  if (this->_internal_has_send_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::send_node(this),
        _Internal::send_node(this).GetCachedSize(), target, stream);
  }

  // .proto.Node recv_node = 3;
  if (this->_internal_has_recv_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::recv_node(this),
        _Internal::recv_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StoragePullRequest)
  return target;
}

size_t StoragePullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StoragePullRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Node send_node = 2;
  if (this->_internal_has_send_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_node_);
  }

  // .proto.Node recv_node = 3;
  if (this->_internal_has_recv_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recv_node_);
  }

  // uint64 epoch_id = 1;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoragePullRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StoragePullRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoragePullRequest::GetClassData() const { return &_class_data_; }

void StoragePullRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StoragePullRequest *>(to)->MergeFrom(
      static_cast<const StoragePullRequest &>(from));
}


void StoragePullRequest::MergeFrom(const StoragePullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StoragePullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_send_node()) {
    _internal_mutable_send_node()->::proto::Node::MergeFrom(from._internal_send_node());
  }
  if (from._internal_has_recv_node()) {
    _internal_mutable_recv_node()->::proto::Node::MergeFrom(from._internal_recv_node());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoragePullRequest::CopyFrom(const StoragePullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StoragePullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragePullRequest::IsInitialized() const {
  return true;
}

void StoragePullRequest::InternalSwap(StoragePullRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoragePullRequest, epoch_id_)
      + sizeof(StoragePullRequest::epoch_id_)
      - PROTOBUF_FIELD_OFFSET(StoragePullRequest, send_node_)>(
          reinterpret_cast<char*>(&send_node_),
          reinterpret_cast<char*>(&other->send_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoragePullRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fstorage_2eproto_getter, &descriptor_table_proto_2fstorage_2eproto_once,
      file_level_metadata_proto_2fstorage_2eproto[0]);
}

// ===================================================================

class StoragePullResponse::_Internal {
 public:
  static const ::proto::Node& send_node(const StoragePullResponse* msg);
  static const ::proto::Node& recv_node(const StoragePullResponse* msg);
};

const ::proto::Node&
StoragePullResponse::_Internal::send_node(const StoragePullResponse* msg) {
  return *msg->send_node_;
}
const ::proto::Node&
StoragePullResponse::_Internal::recv_node(const StoragePullResponse* msg) {
  return *msg->recv_node_;
}
void StoragePullResponse::clear_txns() {
  txns_.Clear();
}
void StoragePullResponse::clear_send_node() {
  if (GetArenaForAllocation() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
}
void StoragePullResponse::clear_recv_node() {
  if (GetArenaForAllocation() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
}
StoragePullResponse::StoragePullResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txns_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.StoragePullResponse)
}
StoragePullResponse::StoragePullResponse(const StoragePullResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txns_(from.txns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_send_node()) {
    send_node_ = new ::proto::Node(*from.send_node_);
  } else {
    send_node_ = nullptr;
  }
  if (from._internal_has_recv_node()) {
    recv_node_ = new ::proto::Node(*from.recv_node_);
  } else {
    recv_node_ = nullptr;
  }
  ::memcpy(&epoch_id_, &from.epoch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&epoch_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.StoragePullResponse)
}

inline void StoragePullResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&send_node_)) + sizeof(result_));
}

StoragePullResponse::~StoragePullResponse() {
  // @@protoc_insertion_point(destructor:proto.StoragePullResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoragePullResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete send_node_;
  if (this != internal_default_instance()) delete recv_node_;
}

void StoragePullResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoragePullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StoragePullResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txns_.Clear();
  if (GetArenaForAllocation() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
  ::memset(&epoch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&epoch_id_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoragePullResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::proto::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 txn_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          txn_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Transaction txns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.Node send_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Node recv_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recv_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoragePullResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StoragePullResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // uint64 epoch_id = 2;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch_id(), target);
  }

  // uint64 txn_num = 3;
  if (this->_internal_txn_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_txn_num(), target);
  }

  // repeated .proto.Transaction txns = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txns_size()); i < n; i++) {
    const auto& repfield = this->_internal_txns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .proto.Node send_node = 5;
  if (this->_internal_has_send_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::send_node(this),
        _Internal::send_node(this).GetCachedSize(), target, stream);
  }

  // .proto.Node recv_node = 6;
  if (this->_internal_has_recv_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::recv_node(this),
        _Internal::recv_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StoragePullResponse)
  return target;
}

size_t StoragePullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StoragePullResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Transaction txns = 4;
  total_size += 1UL * this->_internal_txns_size();
  for (const auto& msg : this->txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.Node send_node = 5;
  if (this->_internal_has_send_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_node_);
  }

  // .proto.Node recv_node = 6;
  if (this->_internal_has_recv_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recv_node_);
  }

  // uint64 epoch_id = 2;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  // uint64 txn_num = 3;
  if (this->_internal_txn_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_num());
  }

  // .proto.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoragePullResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StoragePullResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoragePullResponse::GetClassData() const { return &_class_data_; }

void StoragePullResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StoragePullResponse *>(to)->MergeFrom(
      static_cast<const StoragePullResponse &>(from));
}


void StoragePullResponse::MergeFrom(const StoragePullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StoragePullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  txns_.MergeFrom(from.txns_);
  if (from._internal_has_send_node()) {
    _internal_mutable_send_node()->::proto::Node::MergeFrom(from._internal_send_node());
  }
  if (from._internal_has_recv_node()) {
    _internal_mutable_recv_node()->::proto::Node::MergeFrom(from._internal_recv_node());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from._internal_txn_num() != 0) {
    _internal_set_txn_num(from._internal_txn_num());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoragePullResponse::CopyFrom(const StoragePullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StoragePullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragePullResponse::IsInitialized() const {
  return true;
}

void StoragePullResponse::InternalSwap(StoragePullResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txns_.InternalSwap(&other->txns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoragePullResponse, result_)
      + sizeof(StoragePullResponse::result_)
      - PROTOBUF_FIELD_OFFSET(StoragePullResponse, send_node_)>(
          reinterpret_cast<char*>(&send_node_),
          reinterpret_cast<char*>(&other->send_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoragePullResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fstorage_2eproto_getter, &descriptor_table_proto_2fstorage_2eproto_once,
      file_level_metadata_proto_2fstorage_2eproto[1]);
}

// ===================================================================

class StoragePushResponse::_Internal {
 public:
  static const ::proto::Node& send_node(const StoragePushResponse* msg);
  static const ::proto::Node& recv_node(const StoragePushResponse* msg);
};

const ::proto::Node&
StoragePushResponse::_Internal::send_node(const StoragePushResponse* msg) {
  return *msg->send_node_;
}
const ::proto::Node&
StoragePushResponse::_Internal::recv_node(const StoragePushResponse* msg) {
  return *msg->recv_node_;
}
void StoragePushResponse::clear_txns() {
  txns_.Clear();
}
void StoragePushResponse::clear_send_node() {
  if (GetArenaForAllocation() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
}
void StoragePushResponse::clear_recv_node() {
  if (GetArenaForAllocation() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
}
StoragePushResponse::StoragePushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txns_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.StoragePushResponse)
}
StoragePushResponse::StoragePushResponse(const StoragePushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txns_(from.txns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_send_node()) {
    send_node_ = new ::proto::Node(*from.send_node_);
  } else {
    send_node_ = nullptr;
  }
  if (from._internal_has_recv_node()) {
    recv_node_ = new ::proto::Node(*from.recv_node_);
  } else {
    recv_node_ = nullptr;
  }
  ::memcpy(&epoch_id_, &from.epoch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&epoch_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.StoragePushResponse)
}

inline void StoragePushResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&send_node_)) + sizeof(result_));
}

StoragePushResponse::~StoragePushResponse() {
  // @@protoc_insertion_point(destructor:proto.StoragePushResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoragePushResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete send_node_;
  if (this != internal_default_instance()) delete recv_node_;
}

void StoragePushResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoragePushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StoragePushResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txns_.Clear();
  if (GetArenaForAllocation() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
  ::memset(&epoch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&epoch_id_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoragePushResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::proto::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 txn_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          txn_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Transaction txns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.Node send_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Node recv_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recv_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoragePushResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StoragePushResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // uint64 epoch_id = 2;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch_id(), target);
  }

  // uint64 txn_num = 3;
  if (this->_internal_txn_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_txn_num(), target);
  }

  // repeated .proto.Transaction txns = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txns_size()); i < n; i++) {
    const auto& repfield = this->_internal_txns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .proto.Node send_node = 5;
  if (this->_internal_has_send_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::send_node(this),
        _Internal::send_node(this).GetCachedSize(), target, stream);
  }

  // .proto.Node recv_node = 6;
  if (this->_internal_has_recv_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::recv_node(this),
        _Internal::recv_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StoragePushResponse)
  return target;
}

size_t StoragePushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StoragePushResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Transaction txns = 4;
  total_size += 1UL * this->_internal_txns_size();
  for (const auto& msg : this->txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.Node send_node = 5;
  if (this->_internal_has_send_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_node_);
  }

  // .proto.Node recv_node = 6;
  if (this->_internal_has_recv_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recv_node_);
  }

  // uint64 epoch_id = 2;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  // uint64 txn_num = 3;
  if (this->_internal_txn_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_num());
  }

  // .proto.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoragePushResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StoragePushResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoragePushResponse::GetClassData() const { return &_class_data_; }

void StoragePushResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StoragePushResponse *>(to)->MergeFrom(
      static_cast<const StoragePushResponse &>(from));
}


void StoragePushResponse::MergeFrom(const StoragePushResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StoragePushResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  txns_.MergeFrom(from.txns_);
  if (from._internal_has_send_node()) {
    _internal_mutable_send_node()->::proto::Node::MergeFrom(from._internal_send_node());
  }
  if (from._internal_has_recv_node()) {
    _internal_mutable_recv_node()->::proto::Node::MergeFrom(from._internal_recv_node());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from._internal_txn_num() != 0) {
    _internal_set_txn_num(from._internal_txn_num());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoragePushResponse::CopyFrom(const StoragePushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StoragePushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragePushResponse::IsInitialized() const {
  return true;
}

void StoragePushResponse::InternalSwap(StoragePushResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txns_.InternalSwap(&other->txns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoragePushResponse, result_)
      + sizeof(StoragePushResponse::result_)
      - PROTOBUF_FIELD_OFFSET(StoragePushResponse, send_node_)>(
          reinterpret_cast<char*>(&send_node_),
          reinterpret_cast<char*>(&other->send_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoragePushResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fstorage_2eproto_getter, &descriptor_table_proto_2fstorage_2eproto_once,
      file_level_metadata_proto_2fstorage_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::StoragePullRequest*
Arena::CreateMaybeMessage< ::proto::StoragePullRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::StoragePullRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StoragePullResponse*
Arena::CreateMaybeMessage< ::proto::StoragePullResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::StoragePullResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StoragePushResponse*
Arena::CreateMaybeMessage< ::proto::StoragePushResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::StoragePushResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
