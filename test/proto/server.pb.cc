// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/server.proto

#include "proto/server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ReplyTransactionToClient::ReplyTransactionToClient(
    ::_pbi::ConstantInitialized)
  : send_node_(nullptr)
  , recv_node_(nullptr)
  , client_txn_id_(uint64_t{0u})
  , txn_state_(0)
{}
struct ReplyTransactionToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplyTransactionToClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplyTransactionToClientDefaultTypeInternal() {}
  union {
    ReplyTransactionToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplyTransactionToClientDefaultTypeInternal _ReplyTransactionToClient_default_instance_;
PROTOBUF_CONSTEXPR RaftRequest::RaftRequest(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct RaftRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftRequestDefaultTypeInternal() {}
  union {
    RaftRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftRequestDefaultTypeInternal _RaftRequest_default_instance_;
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized)
  : from_(0)
  , to_(0){}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
PROTOBUF_CONSTEXPR Signal::Signal(
    ::_pbi::ConstantInitialized)
  : from_(0){}
struct SignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalDefaultTypeInternal() {}
  union {
    Signal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalDefaultTypeInternal _Signal_default_instance_;
PROTOBUF_CONSTEXPR LookupMasterRequest::LookupMasterRequest(
    ::_pbi::ConstantInitialized)
  : txn_ids_()
  , _txn_ids_cached_byte_size_(0)
  , keys_(){}
struct LookupMasterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupMasterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupMasterRequestDefaultTypeInternal() {}
  union {
    LookupMasterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupMasterRequestDefaultTypeInternal _LookupMasterRequest_default_instance_;
PROTOBUF_CONSTEXPR ForwardEpochRequest::ForwardEpochRequest(
    ::_pbi::ConstantInitialized)
  : from_(0)
  , to_(0)
  , epoch_id_(uint64_t{0u}){}
struct ForwardEpochRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardEpochRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardEpochRequestDefaultTypeInternal() {}
  union {
    ForwardEpochRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardEpochRequestDefaultTypeInternal _ForwardEpochRequest_default_instance_;
PROTOBUF_CONSTEXPR EpochReplicationAck::EpochReplicationAck(
    ::_pbi::ConstantInitialized)
  : epoch_id_(uint64_t{0u}){}
struct EpochReplicationAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpochReplicationAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpochReplicationAckDefaultTypeInternal() {}
  union {
    EpochReplicationAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpochReplicationAckDefaultTypeInternal _EpochReplicationAck_default_instance_;
PROTOBUF_CONSTEXPR RaftPropose::RaftPropose(
    ::_pbi::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct RaftProposeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftProposeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftProposeDefaultTypeInternal() {}
  union {
    RaftPropose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftProposeDefaultTypeInternal _RaftPropose_default_instance_;
PROTOBUF_CONSTEXPR RaftAcceptRequest::RaftAcceptRequest(
    ::_pbi::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , epoch_id_(uint64_t{0u}){}
struct RaftAcceptRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftAcceptRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftAcceptRequestDefaultTypeInternal() {}
  union {
    RaftAcceptRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftAcceptRequestDefaultTypeInternal _RaftAcceptRequest_default_instance_;
PROTOBUF_CONSTEXPR RaftCommitRequest::RaftCommitRequest(
    ::_pbi::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , epoch_id_(uint64_t{0u}){}
struct RaftCommitRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftCommitRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftCommitRequestDefaultTypeInternal() {}
  union {
    RaftCommitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftCommitRequestDefaultTypeInternal _RaftCommitRequest_default_instance_;
PROTOBUF_CONSTEXPR StatsRequest::StatsRequest(
    ::_pbi::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , level_(0u){}
struct StatsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsRequestDefaultTypeInternal() {}
  union {
    StatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsRequestDefaultTypeInternal _StatsRequest_default_instance_;
PROTOBUF_CONSTEXPR ChangeServerStateRequest::ChangeServerStateRequest(
    ::_pbi::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , target_(0u)
  , state_(0u)
  , epoch_id_(uint64_t{0u})
  , pull_server_id_(0u){}
struct ChangeServerStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeServerStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeServerStateRequestDefaultTypeInternal() {}
  union {
    ChangeServerStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeServerStateRequestDefaultTypeInternal _ChangeServerStateRequest_default_instance_;
PROTOBUF_CONSTEXPR RaftResponse::RaftResponse(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct RaftResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftResponseDefaultTypeInternal() {}
  union {
    RaftResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftResponseDefaultTypeInternal _RaftResponse_default_instance_;
PROTOBUF_CONSTEXPR Pong::Pong(
    ::_pbi::ConstantInitialized)
  : from_(0)
  , to_(0)
  , time_(int64_t{0})
  , epoch_id_(int64_t{0}){}
struct PongDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PongDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PongDefaultTypeInternal() {}
  union {
    Pong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PongDefaultTypeInternal _Pong_default_instance_;
PROTOBUF_CONSTEXPR MasterMetadata::MasterMetadata(
    ::_pbi::ConstantInitialized)
  : master_(0u)
  , epoch_count_(0u){}
struct MasterMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MasterMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MasterMetadataDefaultTypeInternal() {}
  union {
    MasterMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MasterMetadataDefaultTypeInternal _MasterMetadata_default_instance_;
PROTOBUF_CONSTEXPR KeyMasterMetadata::KeyMasterMetadata(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , metadata_(nullptr){}
struct KeyMasterMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyMasterMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyMasterMetadataDefaultTypeInternal() {}
  union {
    KeyMasterMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyMasterMetadataDefaultTypeInternal _KeyMasterMetadata_default_instance_;
PROTOBUF_CONSTEXPR LookupMasterResponse::LookupMasterResponse(
    ::_pbi::ConstantInitialized)
  : epoch_id_()
  , _epoch_id_cached_byte_size_(0)
  , lookup_results_(){}
struct LookupMasterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupMasterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupMasterResponseDefaultTypeInternal() {}
  union {
    LookupMasterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupMasterResponseDefaultTypeInternal _LookupMasterResponse_default_instance_;
PROTOBUF_CONSTEXPR RaftAcceptResponse::RaftAcceptResponse(
    ::_pbi::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , epoch_id_(uint64_t{0u})
  , result_(0u){}
struct RaftAcceptResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftAcceptResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftAcceptResponseDefaultTypeInternal() {}
  union {
    RaftAcceptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftAcceptResponseDefaultTypeInternal _RaftAcceptResponse_default_instance_;
PROTOBUF_CONSTEXPR RaftCommitResponse::RaftCommitResponse(
    ::_pbi::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , epoch_id_(uint64_t{0u})
  , result_(0u){}
struct RaftCommitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftCommitResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftCommitResponseDefaultTypeInternal() {}
  union {
    RaftCommitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftCommitResponseDefaultTypeInternal _RaftCommitResponse_default_instance_;
PROTOBUF_CONSTEXPR StatsResponse::StatsResponse(
    ::_pbi::ConstantInitialized)
  : to_(uint64_t{0u})
  , epoch_id_(uint64_t{0u})
  , from_(0u){}
struct StatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsResponseDefaultTypeInternal() {}
  union {
    StatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsResponseDefaultTypeInternal _StatsResponse_default_instance_;
PROTOBUF_CONSTEXPR ChangeServerStateResponse::ChangeServerStateResponse(
    ::_pbi::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , epoch_id_(uint64_t{0u})
  , target_(0u)
  , state_(0u){}
struct ChangeServerStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeServerStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeServerStateResponseDefaultTypeInternal() {}
  union {
    ChangeServerStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeServerStateResponseDefaultTypeInternal _ChangeServerStateResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2fserver_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fserver_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fserver_2eproto = nullptr;

const uint32_t TableStruct_proto_2fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, client_txn_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, txn_state_),
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, send_node_),
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, recv_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::RaftRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::RaftRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Ping, from_),
  PROTOBUF_FIELD_OFFSET(::proto::Ping, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Signal, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterRequest, txn_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ForwardEpochRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ForwardEpochRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::ForwardEpochRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::ForwardEpochRequest, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EpochReplicationAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::EpochReplicationAck, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftPropose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RaftPropose, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptRequest, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitRequest, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::StatsRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::StatsRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::StatsRequest, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, target_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, state_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, pull_server_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::RaftResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::RaftResponse, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Pong, from_),
  PROTOBUF_FIELD_OFFSET(::proto::Pong, to_),
  PROTOBUF_FIELD_OFFSET(::proto::Pong, time_),
  PROTOBUF_FIELD_OFFSET(::proto::Pong, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MasterMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MasterMetadata, master_),
  PROTOBUF_FIELD_OFFSET(::proto::MasterMetadata, epoch_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::KeyMasterMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::KeyMasterMetadata, key_),
  PROTOBUF_FIELD_OFFSET(::proto::KeyMasterMetadata, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterResponse, lookup_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, from_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, to_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, from_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, to_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::StatsResponse, from_),
  PROTOBUF_FIELD_OFFSET(::proto::StatsResponse, to_),
  PROTOBUF_FIELD_OFFSET(::proto::StatsResponse, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, from_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, to_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, target_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ReplyTransactionToClient)},
  { 10, -1, -1, sizeof(::proto::RaftRequest)},
  { 27, -1, -1, sizeof(::proto::Ping)},
  { 35, -1, -1, sizeof(::proto::Signal)},
  { 42, -1, -1, sizeof(::proto::LookupMasterRequest)},
  { 50, -1, -1, sizeof(::proto::ForwardEpochRequest)},
  { 59, -1, -1, sizeof(::proto::EpochReplicationAck)},
  { 66, -1, -1, sizeof(::proto::RaftPropose)},
  { 73, -1, -1, sizeof(::proto::RaftAcceptRequest)},
  { 82, -1, -1, sizeof(::proto::RaftCommitRequest)},
  { 91, -1, -1, sizeof(::proto::StatsRequest)},
  { 100, -1, -1, sizeof(::proto::ChangeServerStateRequest)},
  { 112, -1, -1, sizeof(::proto::RaftResponse)},
  { 125, -1, -1, sizeof(::proto::Pong)},
  { 135, -1, -1, sizeof(::proto::MasterMetadata)},
  { 143, -1, -1, sizeof(::proto::KeyMasterMetadata)},
  { 151, -1, -1, sizeof(::proto::LookupMasterResponse)},
  { 159, -1, -1, sizeof(::proto::RaftAcceptResponse)},
  { 169, -1, -1, sizeof(::proto::RaftCommitResponse)},
  { 179, -1, -1, sizeof(::proto::StatsResponse)},
  { 188, -1, -1, sizeof(::proto::ChangeServerStateResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ReplyTransactionToClient_default_instance_._instance,
  &::proto::_RaftRequest_default_instance_._instance,
  &::proto::_Ping_default_instance_._instance,
  &::proto::_Signal_default_instance_._instance,
  &::proto::_LookupMasterRequest_default_instance_._instance,
  &::proto::_ForwardEpochRequest_default_instance_._instance,
  &::proto::_EpochReplicationAck_default_instance_._instance,
  &::proto::_RaftPropose_default_instance_._instance,
  &::proto::_RaftAcceptRequest_default_instance_._instance,
  &::proto::_RaftCommitRequest_default_instance_._instance,
  &::proto::_StatsRequest_default_instance_._instance,
  &::proto::_ChangeServerStateRequest_default_instance_._instance,
  &::proto::_RaftResponse_default_instance_._instance,
  &::proto::_Pong_default_instance_._instance,
  &::proto::_MasterMetadata_default_instance_._instance,
  &::proto::_KeyMasterMetadata_default_instance_._instance,
  &::proto::_LookupMasterResponse_default_instance_._instance,
  &::proto::_RaftAcceptResponse_default_instance_._instance,
  &::proto::_RaftCommitResponse_default_instance_._instance,
  &::proto::_StatsResponse_default_instance_._instance,
  &::proto::_ChangeServerStateResponse_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022proto/server.proto\022\005proto\032\027proto/trans"
  "action.proto\032\020proto/node.proto\"\225\001\n\030Reply"
  "TransactionToClient\022\025\n\rclient_txn_id\030\001 \001"
  "(\004\022\"\n\ttxn_state\030\002 \001(\0162\017.proto.TxnState\022\036"
  "\n\tsend_node\030\003 \001(\0132\013.proto.Node\022\036\n\trecv_n"
  "ode\030\004 \001(\0132\013.proto.Node\"\356\003\n\013RaftRequest\022\033"
  "\n\004ping\030\001 \001(\0132\013.proto.PingH\000\022\037\n\006signal\030\002 "
  "\001(\0132\r.proto.SignalH\000\0223\n\rlookup_master\030\003 "
  "\001(\0132\032.proto.LookupMasterRequestH\000\0223\n\rfor"
  "ward_epoch\030\004 \001(\0132\032.proto.ForwardEpochReq"
  "uestH\000\022;\n\025epoch_replication_ack\030\005 \001(\0132\032."
  "proto.EpochReplicationAckH\000\022*\n\014raft_prop"
  "ose\030\006 \001(\0132\022.proto.RaftProposeH\000\022/\n\013raft_"
  "accept\030\007 \001(\0132\030.proto.RaftAcceptRequestH\000"
  "\022/\n\013raft_commit\030\010 \001(\0132\030.proto.RaftCommit"
  "RequestH\000\022$\n\005stats\030\t \001(\0132\023.proto.StatsRe"
  "questH\000\022>\n\023change_server_state\030\n \001(\0132\037.p"
  "roto.ChangeServerStateRequestH\000B\006\n\004type\""
  " \n\004Ping\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\"\026\n\006Sig"
  "nal\022\014\n\004from\030\001 \001(\005\"4\n\023LookupMasterRequest"
  "\022\017\n\007txn_ids\030\001 \003(\004\022\014\n\004keys\030\002 \003(\014\"A\n\023Forwa"
  "rdEpochRequest\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005"
  "\022\020\n\010epoch_id\030\003 \001(\004\"\'\n\023EpochReplicationAc"
  "k\022\020\n\010epoch_id\030\001 \001(\004\"\034\n\013RaftPropose\022\r\n\005va"
  "lue\030\001 \001(\004\"\?\n\021RaftAcceptRequest\022\014\n\004from\030\001"
  " \001(\r\022\n\n\002to\030\002 \001(\r\022\020\n\010epoch_id\030\003 \001(\004\"\?\n\021Ra"
  "ftCommitRequest\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001("
  "\r\022\020\n\010epoch_id\030\003 \001(\004\"7\n\014StatsRequest\022\014\n\004f"
  "rom\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\"}\n\030"
  "ChangeServerStateRequest\022\014\n\004from\030\001 \001(\r\022\n"
  "\n\002to\030\002 \001(\r\022\016\n\006target\030\003 \001(\r\022\r\n\005state\030\004 \001("
  "\r\022\026\n\016pull_server_id\030\005 \001(\r\022\020\n\010epoch_id\030\006 "
  "\001(\004\"\265\002\n\014RaftResponse\022\033\n\004pong\030\001 \001(\0132\013.pro"
  "to.PongH\000\0224\n\rlookup_master\030\002 \001(\0132\033.proto"
  ".LookupMasterResponseH\000\0220\n\013raft_accept\030\003"
  " \001(\0132\031.proto.RaftAcceptResponseH\000\0220\n\013raf"
  "t_commit\030\004 \001(\0132\031.proto.RaftCommitRespons"
  "eH\000\022%\n\005stats\030\005 \001(\0132\024.proto.StatsResponse"
  "H\000\022\?\n\023change_server_state\030\006 \001(\0132 .proto."
  "ChangeServerStateResponseH\000B\006\n\004type\"@\n\004P"
  "ong\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\022\014\n\004time\030\003 "
  "\001(\003\022\020\n\010epoch_id\030\004 \001(\003\"5\n\016MasterMetadata\022"
  "\016\n\006master\030\001 \001(\r\022\023\n\013epoch_count\030\002 \001(\r\"I\n\021"
  "KeyMasterMetadata\022\013\n\003key\030\001 \001(\014\022\'\n\010metada"
  "ta\030\002 \001(\0132\025.proto.MasterMetadata\"Z\n\024Looku"
  "pMasterResponse\022\020\n\010epoch_id\030\001 \003(\004\0220\n\016loo"
  "kup_results\030\002 \003(\0132\030.proto.KeyMasterMetad"
  "ata\"P\n\022RaftAcceptResponse\022\014\n\004from\030\001 \001(\r\022"
  "\n\n\002to\030\002 \001(\r\022\020\n\010epoch_id\030\003 \001(\004\022\016\n\006result\030"
  "\004 \001(\r\"P\n\022RaftCommitResponse\022\014\n\004from\030\001 \001("
  "\r\022\n\n\002to\030\002 \001(\r\022\020\n\010epoch_id\030\003 \001(\004\022\016\n\006resul"
  "t\030\004 \001(\r\";\n\rStatsResponse\022\014\n\004from\030\001 \001(\r\022\n"
  "\n\002to\030\002 \001(\004\022\020\n\010epoch_id\030\003 \001(\004\"f\n\031ChangeSe"
  "rverStateResponse\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 "
  "\001(\r\022\016\n\006target\030\003 \001(\r\022\020\n\010epoch_id\030\004 \001(\004\022\r\n"
  "\005state\030\005 \001(\rb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fserver_2eproto_deps[2] = {
  &::descriptor_table_proto_2fnode_2eproto,
  &::descriptor_table_proto_2ftransaction_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fserver_2eproto = {
    false, false, 2220, descriptor_table_protodef_proto_2fserver_2eproto,
    "proto/server.proto",
    &descriptor_table_proto_2fserver_2eproto_once, descriptor_table_proto_2fserver_2eproto_deps, 2, 21,
    schemas, file_default_instances, TableStruct_proto_2fserver_2eproto::offsets,
    file_level_metadata_proto_2fserver_2eproto, file_level_enum_descriptors_proto_2fserver_2eproto,
    file_level_service_descriptors_proto_2fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fserver_2eproto_getter() {
  return &descriptor_table_proto_2fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fserver_2eproto(&descriptor_table_proto_2fserver_2eproto);
namespace proto {

// ===================================================================

class ReplyTransactionToClient::_Internal {
 public:
  static const ::proto::Node& send_node(const ReplyTransactionToClient* msg);
  static const ::proto::Node& recv_node(const ReplyTransactionToClient* msg);
};

const ::proto::Node&
ReplyTransactionToClient::_Internal::send_node(const ReplyTransactionToClient* msg) {
  return *msg->send_node_;
}
const ::proto::Node&
ReplyTransactionToClient::_Internal::recv_node(const ReplyTransactionToClient* msg) {
  return *msg->recv_node_;
}
void ReplyTransactionToClient::clear_send_node() {
  if (GetArenaForAllocation() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
}
void ReplyTransactionToClient::clear_recv_node() {
  if (GetArenaForAllocation() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
}
ReplyTransactionToClient::ReplyTransactionToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.ReplyTransactionToClient)
}
ReplyTransactionToClient::ReplyTransactionToClient(const ReplyTransactionToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_send_node()) {
    send_node_ = new ::proto::Node(*from.send_node_);
  } else {
    send_node_ = nullptr;
  }
  if (from._internal_has_recv_node()) {
    recv_node_ = new ::proto::Node(*from.recv_node_);
  } else {
    recv_node_ = nullptr;
  }
  ::memcpy(&client_txn_id_, &from.client_txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&txn_state_) -
    reinterpret_cast<char*>(&client_txn_id_)) + sizeof(txn_state_));
  // @@protoc_insertion_point(copy_constructor:proto.ReplyTransactionToClient)
}

inline void ReplyTransactionToClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&txn_state_) -
    reinterpret_cast<char*>(&send_node_)) + sizeof(txn_state_));
}

ReplyTransactionToClient::~ReplyTransactionToClient() {
  // @@protoc_insertion_point(destructor:proto.ReplyTransactionToClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplyTransactionToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete send_node_;
  if (this != internal_default_instance()) delete recv_node_;
}

void ReplyTransactionToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplyTransactionToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ReplyTransactionToClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
  ::memset(&client_txn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txn_state_) -
      reinterpret_cast<char*>(&client_txn_id_)) + sizeof(txn_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyTransactionToClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 client_txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TxnState txn_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_txn_state(static_cast<::proto::TxnState>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto.Node send_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Node recv_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_recv_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplyTransactionToClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ReplyTransactionToClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_txn_id = 1;
  if (this->_internal_client_txn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_txn_id(), target);
  }

  // .proto.TxnState txn_state = 2;
  if (this->_internal_txn_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_txn_state(), target);
  }

  // .proto.Node send_node = 3;
  if (this->_internal_has_send_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::send_node(this),
        _Internal::send_node(this).GetCachedSize(), target, stream);
  }

  // .proto.Node recv_node = 4;
  if (this->_internal_has_recv_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::recv_node(this),
        _Internal::recv_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ReplyTransactionToClient)
  return target;
}

size_t ReplyTransactionToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ReplyTransactionToClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Node send_node = 3;
  if (this->_internal_has_send_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_node_);
  }

  // .proto.Node recv_node = 4;
  if (this->_internal_has_recv_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recv_node_);
  }

  // uint64 client_txn_id = 1;
  if (this->_internal_client_txn_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_txn_id());
  }

  // .proto.TxnState txn_state = 2;
  if (this->_internal_txn_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_txn_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplyTransactionToClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReplyTransactionToClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplyTransactionToClient::GetClassData() const { return &_class_data_; }

void ReplyTransactionToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReplyTransactionToClient *>(to)->MergeFrom(
      static_cast<const ReplyTransactionToClient &>(from));
}


void ReplyTransactionToClient::MergeFrom(const ReplyTransactionToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ReplyTransactionToClient)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_send_node()) {
    _internal_mutable_send_node()->::proto::Node::MergeFrom(from._internal_send_node());
  }
  if (from._internal_has_recv_node()) {
    _internal_mutable_recv_node()->::proto::Node::MergeFrom(from._internal_recv_node());
  }
  if (from._internal_client_txn_id() != 0) {
    _internal_set_client_txn_id(from._internal_client_txn_id());
  }
  if (from._internal_txn_state() != 0) {
    _internal_set_txn_state(from._internal_txn_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplyTransactionToClient::CopyFrom(const ReplyTransactionToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ReplyTransactionToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyTransactionToClient::IsInitialized() const {
  return true;
}

void ReplyTransactionToClient::InternalSwap(ReplyTransactionToClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplyTransactionToClient, txn_state_)
      + sizeof(ReplyTransactionToClient::txn_state_)
      - PROTOBUF_FIELD_OFFSET(ReplyTransactionToClient, send_node_)>(
          reinterpret_cast<char*>(&send_node_),
          reinterpret_cast<char*>(&other->send_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyTransactionToClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[0]);
}

// ===================================================================

class RaftRequest::_Internal {
 public:
  static const ::proto::Ping& ping(const RaftRequest* msg);
  static const ::proto::Signal& signal(const RaftRequest* msg);
  static const ::proto::LookupMasterRequest& lookup_master(const RaftRequest* msg);
  static const ::proto::ForwardEpochRequest& forward_epoch(const RaftRequest* msg);
  static const ::proto::EpochReplicationAck& epoch_replication_ack(const RaftRequest* msg);
  static const ::proto::RaftPropose& raft_propose(const RaftRequest* msg);
  static const ::proto::RaftAcceptRequest& raft_accept(const RaftRequest* msg);
  static const ::proto::RaftCommitRequest& raft_commit(const RaftRequest* msg);
  static const ::proto::StatsRequest& stats(const RaftRequest* msg);
  static const ::proto::ChangeServerStateRequest& change_server_state(const RaftRequest* msg);
};

const ::proto::Ping&
RaftRequest::_Internal::ping(const RaftRequest* msg) {
  return *msg->type_.ping_;
}
const ::proto::Signal&
RaftRequest::_Internal::signal(const RaftRequest* msg) {
  return *msg->type_.signal_;
}
const ::proto::LookupMasterRequest&
RaftRequest::_Internal::lookup_master(const RaftRequest* msg) {
  return *msg->type_.lookup_master_;
}
const ::proto::ForwardEpochRequest&
RaftRequest::_Internal::forward_epoch(const RaftRequest* msg) {
  return *msg->type_.forward_epoch_;
}
const ::proto::EpochReplicationAck&
RaftRequest::_Internal::epoch_replication_ack(const RaftRequest* msg) {
  return *msg->type_.epoch_replication_ack_;
}
const ::proto::RaftPropose&
RaftRequest::_Internal::raft_propose(const RaftRequest* msg) {
  return *msg->type_.raft_propose_;
}
const ::proto::RaftAcceptRequest&
RaftRequest::_Internal::raft_accept(const RaftRequest* msg) {
  return *msg->type_.raft_accept_;
}
const ::proto::RaftCommitRequest&
RaftRequest::_Internal::raft_commit(const RaftRequest* msg) {
  return *msg->type_.raft_commit_;
}
const ::proto::StatsRequest&
RaftRequest::_Internal::stats(const RaftRequest* msg) {
  return *msg->type_.stats_;
}
const ::proto::ChangeServerStateRequest&
RaftRequest::_Internal::change_server_state(const RaftRequest* msg) {
  return *msg->type_.change_server_state_;
}
void RaftRequest::set_allocated_ping(::proto::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    type_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.ping)
}
void RaftRequest::set_allocated_signal(::proto::Signal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signal);
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    set_has_signal();
    type_.signal_ = signal;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.signal)
}
void RaftRequest::set_allocated_lookup_master(::proto::LookupMasterRequest* lookup_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (lookup_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lookup_master);
    if (message_arena != submessage_arena) {
      lookup_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_master, submessage_arena);
    }
    set_has_lookup_master();
    type_.lookup_master_ = lookup_master;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.lookup_master)
}
void RaftRequest::set_allocated_forward_epoch(::proto::ForwardEpochRequest* forward_epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (forward_epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forward_epoch);
    if (message_arena != submessage_arena) {
      forward_epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_epoch, submessage_arena);
    }
    set_has_forward_epoch();
    type_.forward_epoch_ = forward_epoch;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.forward_epoch)
}
void RaftRequest::set_allocated_epoch_replication_ack(::proto::EpochReplicationAck* epoch_replication_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (epoch_replication_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(epoch_replication_ack);
    if (message_arena != submessage_arena) {
      epoch_replication_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_replication_ack, submessage_arena);
    }
    set_has_epoch_replication_ack();
    type_.epoch_replication_ack_ = epoch_replication_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.epoch_replication_ack)
}
void RaftRequest::set_allocated_raft_propose(::proto::RaftPropose* raft_propose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (raft_propose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raft_propose);
    if (message_arena != submessage_arena) {
      raft_propose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_propose, submessage_arena);
    }
    set_has_raft_propose();
    type_.raft_propose_ = raft_propose;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.raft_propose)
}
void RaftRequest::set_allocated_raft_accept(::proto::RaftAcceptRequest* raft_accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (raft_accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raft_accept);
    if (message_arena != submessage_arena) {
      raft_accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_accept, submessage_arena);
    }
    set_has_raft_accept();
    type_.raft_accept_ = raft_accept;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.raft_accept)
}
void RaftRequest::set_allocated_raft_commit(::proto::RaftCommitRequest* raft_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (raft_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raft_commit);
    if (message_arena != submessage_arena) {
      raft_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_commit, submessage_arena);
    }
    set_has_raft_commit();
    type_.raft_commit_ = raft_commit;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.raft_commit)
}
void RaftRequest::set_allocated_stats(::proto::StatsRequest* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    set_has_stats();
    type_.stats_ = stats;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.stats)
}
void RaftRequest::set_allocated_change_server_state(::proto::ChangeServerStateRequest* change_server_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (change_server_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change_server_state);
    if (message_arena != submessage_arena) {
      change_server_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_server_state, submessage_arena);
    }
    set_has_change_server_state();
    type_.change_server_state_ = change_server_state;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.change_server_state)
}
RaftRequest::RaftRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.RaftRequest)
}
RaftRequest::RaftRequest(const RaftRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kPing: {
      _internal_mutable_ping()->::proto::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kSignal: {
      _internal_mutable_signal()->::proto::Signal::MergeFrom(from._internal_signal());
      break;
    }
    case kLookupMaster: {
      _internal_mutable_lookup_master()->::proto::LookupMasterRequest::MergeFrom(from._internal_lookup_master());
      break;
    }
    case kForwardEpoch: {
      _internal_mutable_forward_epoch()->::proto::ForwardEpochRequest::MergeFrom(from._internal_forward_epoch());
      break;
    }
    case kEpochReplicationAck: {
      _internal_mutable_epoch_replication_ack()->::proto::EpochReplicationAck::MergeFrom(from._internal_epoch_replication_ack());
      break;
    }
    case kRaftPropose: {
      _internal_mutable_raft_propose()->::proto::RaftPropose::MergeFrom(from._internal_raft_propose());
      break;
    }
    case kRaftAccept: {
      _internal_mutable_raft_accept()->::proto::RaftAcceptRequest::MergeFrom(from._internal_raft_accept());
      break;
    }
    case kRaftCommit: {
      _internal_mutable_raft_commit()->::proto::RaftCommitRequest::MergeFrom(from._internal_raft_commit());
      break;
    }
    case kStats: {
      _internal_mutable_stats()->::proto::StatsRequest::MergeFrom(from._internal_stats());
      break;
    }
    case kChangeServerState: {
      _internal_mutable_change_server_state()->::proto::ChangeServerStateRequest::MergeFrom(from._internal_change_server_state());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.RaftRequest)
}

inline void RaftRequest::SharedCtor() {
clear_has_type();
}

RaftRequest::~RaftRequest() {
  // @@protoc_insertion_point(destructor:proto.RaftRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void RaftRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RaftRequest::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.RaftRequest)
  switch (type_case()) {
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.ping_;
      }
      break;
    }
    case kSignal: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.signal_;
      }
      break;
    }
    case kLookupMaster: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.lookup_master_;
      }
      break;
    }
    case kForwardEpoch: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.forward_epoch_;
      }
      break;
    }
    case kEpochReplicationAck: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.epoch_replication_ack_;
      }
      break;
    }
    case kRaftPropose: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.raft_propose_;
      }
      break;
    }
    case kRaftAccept: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.raft_accept_;
      }
      break;
    }
    case kRaftCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.raft_commit_;
      }
      break;
    }
    case kStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.stats_;
      }
      break;
    }
    case kChangeServerState: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.change_server_state_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RaftRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Ping ping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Signal signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.LookupMasterRequest lookup_master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ForwardEpochRequest forward_epoch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_epoch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.EpochReplicationAck epoch_replication_ack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_replication_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RaftPropose raft_propose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_propose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RaftAcceptRequest raft_accept = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_accept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RaftCommitRequest raft_commit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.StatsRequest stats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ChangeServerStateRequest change_server_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_server_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Ping ping = 1;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  // .proto.Signal signal = 2;
  if (_internal_has_signal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signal(this),
        _Internal::signal(this).GetCachedSize(), target, stream);
  }

  // .proto.LookupMasterRequest lookup_master = 3;
  if (_internal_has_lookup_master()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::lookup_master(this),
        _Internal::lookup_master(this).GetCachedSize(), target, stream);
  }

  // .proto.ForwardEpochRequest forward_epoch = 4;
  if (_internal_has_forward_epoch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::forward_epoch(this),
        _Internal::forward_epoch(this).GetCachedSize(), target, stream);
  }

  // .proto.EpochReplicationAck epoch_replication_ack = 5;
  if (_internal_has_epoch_replication_ack()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::epoch_replication_ack(this),
        _Internal::epoch_replication_ack(this).GetCachedSize(), target, stream);
  }

  // .proto.RaftPropose raft_propose = 6;
  if (_internal_has_raft_propose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::raft_propose(this),
        _Internal::raft_propose(this).GetCachedSize(), target, stream);
  }

  // .proto.RaftAcceptRequest raft_accept = 7;
  if (_internal_has_raft_accept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::raft_accept(this),
        _Internal::raft_accept(this).GetCachedSize(), target, stream);
  }

  // .proto.RaftCommitRequest raft_commit = 8;
  if (_internal_has_raft_commit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::raft_commit(this),
        _Internal::raft_commit(this).GetCachedSize(), target, stream);
  }

  // .proto.StatsRequest stats = 9;
  if (_internal_has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // .proto.ChangeServerStateRequest change_server_state = 10;
  if (_internal_has_change_server_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::change_server_state(this),
        _Internal::change_server_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftRequest)
  return target;
}

size_t RaftRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .proto.Ping ping = 1;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.ping_);
      break;
    }
    // .proto.Signal signal = 2;
    case kSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.signal_);
      break;
    }
    // .proto.LookupMasterRequest lookup_master = 3;
    case kLookupMaster: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.lookup_master_);
      break;
    }
    // .proto.ForwardEpochRequest forward_epoch = 4;
    case kForwardEpoch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.forward_epoch_);
      break;
    }
    // .proto.EpochReplicationAck epoch_replication_ack = 5;
    case kEpochReplicationAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.epoch_replication_ack_);
      break;
    }
    // .proto.RaftPropose raft_propose = 6;
    case kRaftPropose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_propose_);
      break;
    }
    // .proto.RaftAcceptRequest raft_accept = 7;
    case kRaftAccept: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_accept_);
      break;
    }
    // .proto.RaftCommitRequest raft_commit = 8;
    case kRaftCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_commit_);
      break;
    }
    // .proto.StatsRequest stats = 9;
    case kStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.stats_);
      break;
    }
    // .proto.ChangeServerStateRequest change_server_state = 10;
    case kChangeServerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.change_server_state_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RaftRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftRequest::GetClassData() const { return &_class_data_; }

void RaftRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RaftRequest *>(to)->MergeFrom(
      static_cast<const RaftRequest &>(from));
}


void RaftRequest::MergeFrom(const RaftRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kPing: {
      _internal_mutable_ping()->::proto::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kSignal: {
      _internal_mutable_signal()->::proto::Signal::MergeFrom(from._internal_signal());
      break;
    }
    case kLookupMaster: {
      _internal_mutable_lookup_master()->::proto::LookupMasterRequest::MergeFrom(from._internal_lookup_master());
      break;
    }
    case kForwardEpoch: {
      _internal_mutable_forward_epoch()->::proto::ForwardEpochRequest::MergeFrom(from._internal_forward_epoch());
      break;
    }
    case kEpochReplicationAck: {
      _internal_mutable_epoch_replication_ack()->::proto::EpochReplicationAck::MergeFrom(from._internal_epoch_replication_ack());
      break;
    }
    case kRaftPropose: {
      _internal_mutable_raft_propose()->::proto::RaftPropose::MergeFrom(from._internal_raft_propose());
      break;
    }
    case kRaftAccept: {
      _internal_mutable_raft_accept()->::proto::RaftAcceptRequest::MergeFrom(from._internal_raft_accept());
      break;
    }
    case kRaftCommit: {
      _internal_mutable_raft_commit()->::proto::RaftCommitRequest::MergeFrom(from._internal_raft_commit());
      break;
    }
    case kStats: {
      _internal_mutable_stats()->::proto::StatsRequest::MergeFrom(from._internal_stats());
      break;
    }
    case kChangeServerState: {
      _internal_mutable_change_server_state()->::proto::ChangeServerStateRequest::MergeFrom(from._internal_change_server_state());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftRequest::CopyFrom(const RaftRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftRequest::IsInitialized() const {
  return true;
}

void RaftRequest::InternalSwap(RaftRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[1]);
}

// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:proto.Ping)
}

inline void Ping::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:proto.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from());
  }

  // int32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }

void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ping *>(to)->MergeFrom(
      static_cast<const Ping &>(from));
}


void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ping, to_)
      + sizeof(Ping::to_)
      - PROTOBUF_FIELD_OFFSET(Ping, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[2]);
}

// ===================================================================

class Signal::_Internal {
 public:
};

Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_ = from.from_;
  // @@protoc_insertion_point(copy_constructor:proto.Signal)
}

inline void Signal::SharedCtor() {
from_ = 0;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:proto.Signal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Signal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Signal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Signal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Signal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Signal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Signal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Signal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Signal::GetClassData() const { return &_class_data_; }

void Signal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Signal *>(to)->MergeFrom(
      static_cast<const Signal &>(from));
}


void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(from_, other->from_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[3]);
}

// ===================================================================

class LookupMasterRequest::_Internal {
 public:
};

LookupMasterRequest::LookupMasterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txn_ids_(arena),
  keys_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.LookupMasterRequest)
}
LookupMasterRequest::LookupMasterRequest(const LookupMasterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txn_ids_(from.txn_ids_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.LookupMasterRequest)
}

inline void LookupMasterRequest::SharedCtor() {
}

LookupMasterRequest::~LookupMasterRequest() {
  // @@protoc_insertion_point(destructor:proto.LookupMasterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupMasterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LookupMasterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupMasterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LookupMasterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_ids_.Clear();
  keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupMasterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 txn_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_txn_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_txn_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupMasterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LookupMasterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 txn_ids = 1;
  {
    int byte_size = _txn_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_txn_ids(), byte_size, target);
    }
  }

  // repeated bytes keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LookupMasterRequest)
  return target;
}

size_t LookupMasterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LookupMasterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 txn_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->txn_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _txn_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keys_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LookupMasterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LookupMasterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LookupMasterRequest::GetClassData() const { return &_class_data_; }

void LookupMasterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LookupMasterRequest *>(to)->MergeFrom(
      static_cast<const LookupMasterRequest &>(from));
}


void LookupMasterRequest::MergeFrom(const LookupMasterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LookupMasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  txn_ids_.MergeFrom(from.txn_ids_);
  keys_.MergeFrom(from.keys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LookupMasterRequest::CopyFrom(const LookupMasterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LookupMasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupMasterRequest::IsInitialized() const {
  return true;
}

void LookupMasterRequest::InternalSwap(LookupMasterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txn_ids_.InternalSwap(&other->txn_ids_);
  keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupMasterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[4]);
}

// ===================================================================

class ForwardEpochRequest::_Internal {
 public:
};

ForwardEpochRequest::ForwardEpochRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.ForwardEpochRequest)
}
ForwardEpochRequest::ForwardEpochRequest(const ForwardEpochRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ForwardEpochRequest)
}

inline void ForwardEpochRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
}

ForwardEpochRequest::~ForwardEpochRequest() {
  // @@protoc_insertion_point(destructor:proto.ForwardEpochRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForwardEpochRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForwardEpochRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForwardEpochRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ForwardEpochRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardEpochRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForwardEpochRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ForwardEpochRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ForwardEpochRequest)
  return target;
}

size_t ForwardEpochRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ForwardEpochRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from());
  }

  // int32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardEpochRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForwardEpochRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardEpochRequest::GetClassData() const { return &_class_data_; }

void ForwardEpochRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ForwardEpochRequest *>(to)->MergeFrom(
      static_cast<const ForwardEpochRequest &>(from));
}


void ForwardEpochRequest::MergeFrom(const ForwardEpochRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ForwardEpochRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardEpochRequest::CopyFrom(const ForwardEpochRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ForwardEpochRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardEpochRequest::IsInitialized() const {
  return true;
}

void ForwardEpochRequest::InternalSwap(ForwardEpochRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForwardEpochRequest, epoch_id_)
      + sizeof(ForwardEpochRequest::epoch_id_)
      - PROTOBUF_FIELD_OFFSET(ForwardEpochRequest, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardEpochRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[5]);
}

// ===================================================================

class EpochReplicationAck::_Internal {
 public:
};

EpochReplicationAck::EpochReplicationAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.EpochReplicationAck)
}
EpochReplicationAck::EpochReplicationAck(const EpochReplicationAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  epoch_id_ = from.epoch_id_;
  // @@protoc_insertion_point(copy_constructor:proto.EpochReplicationAck)
}

inline void EpochReplicationAck::SharedCtor() {
epoch_id_ = uint64_t{0u};
}

EpochReplicationAck::~EpochReplicationAck() {
  // @@protoc_insertion_point(destructor:proto.EpochReplicationAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EpochReplicationAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EpochReplicationAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EpochReplicationAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EpochReplicationAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epoch_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochReplicationAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epoch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EpochReplicationAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EpochReplicationAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch_id = 1;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EpochReplicationAck)
  return target;
}

size_t EpochReplicationAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EpochReplicationAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 epoch_id = 1;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EpochReplicationAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EpochReplicationAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EpochReplicationAck::GetClassData() const { return &_class_data_; }

void EpochReplicationAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EpochReplicationAck *>(to)->MergeFrom(
      static_cast<const EpochReplicationAck &>(from));
}


void EpochReplicationAck::MergeFrom(const EpochReplicationAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EpochReplicationAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EpochReplicationAck::CopyFrom(const EpochReplicationAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EpochReplicationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochReplicationAck::IsInitialized() const {
  return true;
}

void EpochReplicationAck::InternalSwap(EpochReplicationAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(epoch_id_, other->epoch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochReplicationAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[6]);
}

// ===================================================================

class RaftPropose::_Internal {
 public:
};

RaftPropose::RaftPropose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.RaftPropose)
}
RaftPropose::RaftPropose(const RaftPropose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:proto.RaftPropose)
}

inline void RaftPropose::SharedCtor() {
value_ = uint64_t{0u};
}

RaftPropose::~RaftPropose() {
  // @@protoc_insertion_point(destructor:proto.RaftPropose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftPropose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftPropose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RaftPropose::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftPropose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftPropose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftPropose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftPropose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftPropose)
  return target;
}

size_t RaftPropose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftPropose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftPropose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RaftPropose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftPropose::GetClassData() const { return &_class_data_; }

void RaftPropose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RaftPropose *>(to)->MergeFrom(
      static_cast<const RaftPropose &>(from));
}


void RaftPropose::MergeFrom(const RaftPropose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftPropose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftPropose::CopyFrom(const RaftPropose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftPropose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftPropose::IsInitialized() const {
  return true;
}

void RaftPropose::InternalSwap(RaftPropose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftPropose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[7]);
}

// ===================================================================

class RaftAcceptRequest::_Internal {
 public:
};

RaftAcceptRequest::RaftAcceptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.RaftAcceptRequest)
}
RaftAcceptRequest::RaftAcceptRequest(const RaftAcceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  // @@protoc_insertion_point(copy_constructor:proto.RaftAcceptRequest)
}

inline void RaftAcceptRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
}

RaftAcceptRequest::~RaftAcceptRequest() {
  // @@protoc_insertion_point(destructor:proto.RaftAcceptRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftAcceptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftAcceptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RaftAcceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftAcceptRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftAcceptRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftAcceptRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftAcceptRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftAcceptRequest)
  return target;
}

size_t RaftAcceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftAcceptRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftAcceptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RaftAcceptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftAcceptRequest::GetClassData() const { return &_class_data_; }

void RaftAcceptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RaftAcceptRequest *>(to)->MergeFrom(
      static_cast<const RaftAcceptRequest &>(from));
}


void RaftAcceptRequest::MergeFrom(const RaftAcceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftAcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftAcceptRequest::CopyFrom(const RaftAcceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftAcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftAcceptRequest::IsInitialized() const {
  return true;
}

void RaftAcceptRequest::InternalSwap(RaftAcceptRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftAcceptRequest, epoch_id_)
      + sizeof(RaftAcceptRequest::epoch_id_)
      - PROTOBUF_FIELD_OFFSET(RaftAcceptRequest, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftAcceptRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[8]);
}

// ===================================================================

class RaftCommitRequest::_Internal {
 public:
};

RaftCommitRequest::RaftCommitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.RaftCommitRequest)
}
RaftCommitRequest::RaftCommitRequest(const RaftCommitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  // @@protoc_insertion_point(copy_constructor:proto.RaftCommitRequest)
}

inline void RaftCommitRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
}

RaftCommitRequest::~RaftCommitRequest() {
  // @@protoc_insertion_point(destructor:proto.RaftCommitRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftCommitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftCommitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RaftCommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftCommitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftCommitRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftCommitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftCommitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftCommitRequest)
  return target;
}

size_t RaftCommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftCommitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftCommitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RaftCommitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftCommitRequest::GetClassData() const { return &_class_data_; }

void RaftCommitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RaftCommitRequest *>(to)->MergeFrom(
      static_cast<const RaftCommitRequest &>(from));
}


void RaftCommitRequest::MergeFrom(const RaftCommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftCommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftCommitRequest::CopyFrom(const RaftCommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftCommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCommitRequest::IsInitialized() const {
  return true;
}

void RaftCommitRequest::InternalSwap(RaftCommitRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftCommitRequest, epoch_id_)
      + sizeof(RaftCommitRequest::epoch_id_)
      - PROTOBUF_FIELD_OFFSET(RaftCommitRequest, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftCommitRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[9]);
}

// ===================================================================

class StatsRequest::_Internal {
 public:
};

StatsRequest::StatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.StatsRequest)
}
StatsRequest::StatsRequest(const StatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&from_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.StatsRequest)
}

inline void StatsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&from_)) + sizeof(level_));
}

StatsRequest::~StatsRequest() {
  // @@protoc_insertion_point(destructor:proto.StatsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&from_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StatsRequest)
  return target;
}

size_t StatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsRequest::GetClassData() const { return &_class_data_; }

void StatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatsRequest *>(to)->MergeFrom(
      static_cast<const StatsRequest &>(from));
}


void StatsRequest::MergeFrom(const StatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsRequest::CopyFrom(const StatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsRequest::IsInitialized() const {
  return true;
}

void StatsRequest::InternalSwap(StatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatsRequest, level_)
      + sizeof(StatsRequest::level_)
      - PROTOBUF_FIELD_OFFSET(StatsRequest, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[10]);
}

// ===================================================================

class ChangeServerStateRequest::_Internal {
 public:
};

ChangeServerStateRequest::ChangeServerStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.ChangeServerStateRequest)
}
ChangeServerStateRequest::ChangeServerStateRequest(const ChangeServerStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&pull_server_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(pull_server_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ChangeServerStateRequest)
}

inline void ChangeServerStateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pull_server_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(pull_server_id_));
}

ChangeServerStateRequest::~ChangeServerStateRequest() {
  // @@protoc_insertion_point(destructor:proto.ChangeServerStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeServerStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangeServerStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeServerStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeServerStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pull_server_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(pull_server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeServerStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pull_server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          pull_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeServerStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeServerStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint32 target = 3;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target(), target);
  }

  // uint32 state = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_state(), target);
  }

  // uint32 pull_server_id = 5;
  if (this->_internal_pull_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pull_server_id(), target);
  }

  // uint64 epoch_id = 6;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeServerStateRequest)
  return target;
}

size_t ChangeServerStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeServerStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint32 target = 3;
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  // uint32 state = 4;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  // uint64 epoch_id = 6;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  // uint32 pull_server_id = 5;
  if (this->_internal_pull_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pull_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeServerStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeServerStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeServerStateRequest::GetClassData() const { return &_class_data_; }

void ChangeServerStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeServerStateRequest *>(to)->MergeFrom(
      static_cast<const ChangeServerStateRequest &>(from));
}


void ChangeServerStateRequest::MergeFrom(const ChangeServerStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeServerStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from._internal_pull_server_id() != 0) {
    _internal_set_pull_server_id(from._internal_pull_server_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeServerStateRequest::CopyFrom(const ChangeServerStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeServerStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeServerStateRequest::IsInitialized() const {
  return true;
}

void ChangeServerStateRequest::InternalSwap(ChangeServerStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeServerStateRequest, pull_server_id_)
      + sizeof(ChangeServerStateRequest::pull_server_id_)
      - PROTOBUF_FIELD_OFFSET(ChangeServerStateRequest, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeServerStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[11]);
}

// ===================================================================

class RaftResponse::_Internal {
 public:
  static const ::proto::Pong& pong(const RaftResponse* msg);
  static const ::proto::LookupMasterResponse& lookup_master(const RaftResponse* msg);
  static const ::proto::RaftAcceptResponse& raft_accept(const RaftResponse* msg);
  static const ::proto::RaftCommitResponse& raft_commit(const RaftResponse* msg);
  static const ::proto::StatsResponse& stats(const RaftResponse* msg);
  static const ::proto::ChangeServerStateResponse& change_server_state(const RaftResponse* msg);
};

const ::proto::Pong&
RaftResponse::_Internal::pong(const RaftResponse* msg) {
  return *msg->type_.pong_;
}
const ::proto::LookupMasterResponse&
RaftResponse::_Internal::lookup_master(const RaftResponse* msg) {
  return *msg->type_.lookup_master_;
}
const ::proto::RaftAcceptResponse&
RaftResponse::_Internal::raft_accept(const RaftResponse* msg) {
  return *msg->type_.raft_accept_;
}
const ::proto::RaftCommitResponse&
RaftResponse::_Internal::raft_commit(const RaftResponse* msg) {
  return *msg->type_.raft_commit_;
}
const ::proto::StatsResponse&
RaftResponse::_Internal::stats(const RaftResponse* msg) {
  return *msg->type_.stats_;
}
const ::proto::ChangeServerStateResponse&
RaftResponse::_Internal::change_server_state(const RaftResponse* msg) {
  return *msg->type_.change_server_state_;
}
void RaftResponse::set_allocated_pong(::proto::Pong* pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pong);
    if (message_arena != submessage_arena) {
      pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong, submessage_arena);
    }
    set_has_pong();
    type_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.pong)
}
void RaftResponse::set_allocated_lookup_master(::proto::LookupMasterResponse* lookup_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (lookup_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lookup_master);
    if (message_arena != submessage_arena) {
      lookup_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_master, submessage_arena);
    }
    set_has_lookup_master();
    type_.lookup_master_ = lookup_master;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.lookup_master)
}
void RaftResponse::set_allocated_raft_accept(::proto::RaftAcceptResponse* raft_accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (raft_accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raft_accept);
    if (message_arena != submessage_arena) {
      raft_accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_accept, submessage_arena);
    }
    set_has_raft_accept();
    type_.raft_accept_ = raft_accept;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.raft_accept)
}
void RaftResponse::set_allocated_raft_commit(::proto::RaftCommitResponse* raft_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (raft_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raft_commit);
    if (message_arena != submessage_arena) {
      raft_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_commit, submessage_arena);
    }
    set_has_raft_commit();
    type_.raft_commit_ = raft_commit;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.raft_commit)
}
void RaftResponse::set_allocated_stats(::proto::StatsResponse* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    set_has_stats();
    type_.stats_ = stats;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.stats)
}
void RaftResponse::set_allocated_change_server_state(::proto::ChangeServerStateResponse* change_server_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (change_server_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change_server_state);
    if (message_arena != submessage_arena) {
      change_server_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_server_state, submessage_arena);
    }
    set_has_change_server_state();
    type_.change_server_state_ = change_server_state;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.change_server_state)
}
RaftResponse::RaftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.RaftResponse)
}
RaftResponse::RaftResponse(const RaftResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kPong: {
      _internal_mutable_pong()->::proto::Pong::MergeFrom(from._internal_pong());
      break;
    }
    case kLookupMaster: {
      _internal_mutable_lookup_master()->::proto::LookupMasterResponse::MergeFrom(from._internal_lookup_master());
      break;
    }
    case kRaftAccept: {
      _internal_mutable_raft_accept()->::proto::RaftAcceptResponse::MergeFrom(from._internal_raft_accept());
      break;
    }
    case kRaftCommit: {
      _internal_mutable_raft_commit()->::proto::RaftCommitResponse::MergeFrom(from._internal_raft_commit());
      break;
    }
    case kStats: {
      _internal_mutable_stats()->::proto::StatsResponse::MergeFrom(from._internal_stats());
      break;
    }
    case kChangeServerState: {
      _internal_mutable_change_server_state()->::proto::ChangeServerStateResponse::MergeFrom(from._internal_change_server_state());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.RaftResponse)
}

inline void RaftResponse::SharedCtor() {
clear_has_type();
}

RaftResponse::~RaftResponse() {
  // @@protoc_insertion_point(destructor:proto.RaftResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void RaftResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RaftResponse::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.RaftResponse)
  switch (type_case()) {
    case kPong: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.pong_;
      }
      break;
    }
    case kLookupMaster: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.lookup_master_;
      }
      break;
    }
    case kRaftAccept: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.raft_accept_;
      }
      break;
    }
    case kRaftCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.raft_commit_;
      }
      break;
    }
    case kStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.stats_;
      }
      break;
    }
    case kChangeServerState: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.change_server_state_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RaftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Pong pong = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.LookupMasterResponse lookup_master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RaftAcceptResponse raft_accept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_accept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RaftCommitResponse raft_commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.StatsResponse stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ChangeServerStateResponse change_server_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_server_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Pong pong = 1;
  if (_internal_has_pong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pong(this),
        _Internal::pong(this).GetCachedSize(), target, stream);
  }

  // .proto.LookupMasterResponse lookup_master = 2;
  if (_internal_has_lookup_master()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lookup_master(this),
        _Internal::lookup_master(this).GetCachedSize(), target, stream);
  }

  // .proto.RaftAcceptResponse raft_accept = 3;
  if (_internal_has_raft_accept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::raft_accept(this),
        _Internal::raft_accept(this).GetCachedSize(), target, stream);
  }

  // .proto.RaftCommitResponse raft_commit = 4;
  if (_internal_has_raft_commit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::raft_commit(this),
        _Internal::raft_commit(this).GetCachedSize(), target, stream);
  }

  // .proto.StatsResponse stats = 5;
  if (_internal_has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // .proto.ChangeServerStateResponse change_server_state = 6;
  if (_internal_has_change_server_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::change_server_state(this),
        _Internal::change_server_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftResponse)
  return target;
}

size_t RaftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .proto.Pong pong = 1;
    case kPong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.pong_);
      break;
    }
    // .proto.LookupMasterResponse lookup_master = 2;
    case kLookupMaster: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.lookup_master_);
      break;
    }
    // .proto.RaftAcceptResponse raft_accept = 3;
    case kRaftAccept: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_accept_);
      break;
    }
    // .proto.RaftCommitResponse raft_commit = 4;
    case kRaftCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_commit_);
      break;
    }
    // .proto.StatsResponse stats = 5;
    case kStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.stats_);
      break;
    }
    // .proto.ChangeServerStateResponse change_server_state = 6;
    case kChangeServerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.change_server_state_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RaftResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftResponse::GetClassData() const { return &_class_data_; }

void RaftResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RaftResponse *>(to)->MergeFrom(
      static_cast<const RaftResponse &>(from));
}


void RaftResponse::MergeFrom(const RaftResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kPong: {
      _internal_mutable_pong()->::proto::Pong::MergeFrom(from._internal_pong());
      break;
    }
    case kLookupMaster: {
      _internal_mutable_lookup_master()->::proto::LookupMasterResponse::MergeFrom(from._internal_lookup_master());
      break;
    }
    case kRaftAccept: {
      _internal_mutable_raft_accept()->::proto::RaftAcceptResponse::MergeFrom(from._internal_raft_accept());
      break;
    }
    case kRaftCommit: {
      _internal_mutable_raft_commit()->::proto::RaftCommitResponse::MergeFrom(from._internal_raft_commit());
      break;
    }
    case kStats: {
      _internal_mutable_stats()->::proto::StatsResponse::MergeFrom(from._internal_stats());
      break;
    }
    case kChangeServerState: {
      _internal_mutable_change_server_state()->::proto::ChangeServerStateResponse::MergeFrom(from._internal_change_server_state());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftResponse::CopyFrom(const RaftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftResponse::IsInitialized() const {
  return true;
}

void RaftResponse::InternalSwap(RaftResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[12]);
}

// ===================================================================

class Pong::_Internal {
 public:
};

Pong::Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.Pong)
}
Pong::Pong(const Pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  // @@protoc_insertion_point(copy_constructor:proto.Pong)
}

inline void Pong::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:proto.Pong)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Pong)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pong::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 epoch_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pong::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Pong)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  // int64 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // int64 epoch_id = 4;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Pong)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from());
  }

  // int32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to());
  }

  // int64 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 epoch_id = 4;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_epoch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pong::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pong::GetClassData() const { return &_class_data_; }

void Pong::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pong *>(to)->MergeFrom(
      static_cast<const Pong &>(from));
}


void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  return true;
}

void Pong::InternalSwap(Pong* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pong, epoch_id_)
      + sizeof(Pong::epoch_id_)
      - PROTOBUF_FIELD_OFFSET(Pong, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pong::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[13]);
}

// ===================================================================

class MasterMetadata::_Internal {
 public:
};

MasterMetadata::MasterMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.MasterMetadata)
}
MasterMetadata::MasterMetadata(const MasterMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&master_, &from.master_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_count_) -
    reinterpret_cast<char*>(&master_)) + sizeof(epoch_count_));
  // @@protoc_insertion_point(copy_constructor:proto.MasterMetadata)
}

inline void MasterMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&master_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epoch_count_) -
    reinterpret_cast<char*>(&master_)) + sizeof(epoch_count_));
}

MasterMetadata::~MasterMetadata() {
  // @@protoc_insertion_point(destructor:proto.MasterMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MasterMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MasterMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MasterMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MasterMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&master_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_count_) -
      reinterpret_cast<char*>(&master_)) + sizeof(epoch_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MasterMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 master = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 epoch_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          epoch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MasterMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MasterMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 master = 1;
  if (this->_internal_master() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_master(), target);
  }

  // uint32 epoch_count = 2;
  if (this->_internal_epoch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_epoch_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MasterMetadata)
  return target;
}

size_t MasterMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MasterMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 master = 1;
  if (this->_internal_master() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_master());
  }

  // uint32 epoch_count = 2;
  if (this->_internal_epoch_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_epoch_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MasterMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MasterMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MasterMetadata::GetClassData() const { return &_class_data_; }

void MasterMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MasterMetadata *>(to)->MergeFrom(
      static_cast<const MasterMetadata &>(from));
}


void MasterMetadata::MergeFrom(const MasterMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MasterMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_master() != 0) {
    _internal_set_master(from._internal_master());
  }
  if (from._internal_epoch_count() != 0) {
    _internal_set_epoch_count(from._internal_epoch_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MasterMetadata::CopyFrom(const MasterMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MasterMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterMetadata::IsInitialized() const {
  return true;
}

void MasterMetadata::InternalSwap(MasterMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MasterMetadata, epoch_count_)
      + sizeof(MasterMetadata::epoch_count_)
      - PROTOBUF_FIELD_OFFSET(MasterMetadata, master_)>(
          reinterpret_cast<char*>(&master_),
          reinterpret_cast<char*>(&other->master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[14]);
}

// ===================================================================

class KeyMasterMetadata::_Internal {
 public:
  static const ::proto::MasterMetadata& metadata(const KeyMasterMetadata* msg);
};

const ::proto::MasterMetadata&
KeyMasterMetadata::_Internal::metadata(const KeyMasterMetadata* msg) {
  return *msg->metadata_;
}
KeyMasterMetadata::KeyMasterMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.KeyMasterMetadata)
}
KeyMasterMetadata::KeyMasterMetadata(const KeyMasterMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::proto::MasterMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.KeyMasterMetadata)
}

inline void KeyMasterMetadata::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

KeyMasterMetadata::~KeyMasterMetadata() {
  // @@protoc_insertion_point(destructor:proto.KeyMasterMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyMasterMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  if (this != internal_default_instance()) delete metadata_;
}

void KeyMasterMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyMasterMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.KeyMasterMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyMasterMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.MasterMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyMasterMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.KeyMasterMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .proto.MasterMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.KeyMasterMetadata)
  return target;
}

size_t KeyMasterMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.KeyMasterMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .proto.MasterMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyMasterMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyMasterMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyMasterMetadata::GetClassData() const { return &_class_data_; }

void KeyMasterMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyMasterMetadata *>(to)->MergeFrom(
      static_cast<const KeyMasterMetadata &>(from));
}


void KeyMasterMetadata::MergeFrom(const KeyMasterMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.KeyMasterMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::proto::MasterMetadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyMasterMetadata::CopyFrom(const KeyMasterMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.KeyMasterMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyMasterMetadata::IsInitialized() const {
  return true;
}

void KeyMasterMetadata::InternalSwap(KeyMasterMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyMasterMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[15]);
}

// ===================================================================

class LookupMasterResponse::_Internal {
 public:
};

LookupMasterResponse::LookupMasterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  epoch_id_(arena),
  lookup_results_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.LookupMasterResponse)
}
LookupMasterResponse::LookupMasterResponse(const LookupMasterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      epoch_id_(from.epoch_id_),
      lookup_results_(from.lookup_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.LookupMasterResponse)
}

inline void LookupMasterResponse::SharedCtor() {
}

LookupMasterResponse::~LookupMasterResponse() {
  // @@protoc_insertion_point(destructor:proto.LookupMasterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupMasterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LookupMasterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupMasterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LookupMasterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epoch_id_.Clear();
  lookup_results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupMasterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 epoch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_epoch_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_epoch_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.KeyMasterMetadata lookup_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lookup_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupMasterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LookupMasterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 epoch_id = 1;
  {
    int byte_size = _epoch_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_epoch_id(), byte_size, target);
    }
  }

  // repeated .proto.KeyMasterMetadata lookup_results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lookup_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_lookup_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LookupMasterResponse)
  return target;
}

size_t LookupMasterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LookupMasterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 epoch_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->epoch_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _epoch_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto.KeyMasterMetadata lookup_results = 2;
  total_size += 1UL * this->_internal_lookup_results_size();
  for (const auto& msg : this->lookup_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LookupMasterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LookupMasterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LookupMasterResponse::GetClassData() const { return &_class_data_; }

void LookupMasterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LookupMasterResponse *>(to)->MergeFrom(
      static_cast<const LookupMasterResponse &>(from));
}


void LookupMasterResponse::MergeFrom(const LookupMasterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LookupMasterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  epoch_id_.MergeFrom(from.epoch_id_);
  lookup_results_.MergeFrom(from.lookup_results_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LookupMasterResponse::CopyFrom(const LookupMasterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LookupMasterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupMasterResponse::IsInitialized() const {
  return true;
}

void LookupMasterResponse::InternalSwap(LookupMasterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  epoch_id_.InternalSwap(&other->epoch_id_);
  lookup_results_.InternalSwap(&other->lookup_results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupMasterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[16]);
}

// ===================================================================

class RaftAcceptResponse::_Internal {
 public:
};

RaftAcceptResponse::RaftAcceptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.RaftAcceptResponse)
}
RaftAcceptResponse::RaftAcceptResponse(const RaftAcceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&from_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.RaftAcceptResponse)
}

inline void RaftAcceptResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&from_)) + sizeof(result_));
}

RaftAcceptResponse::~RaftAcceptResponse() {
  // @@protoc_insertion_point(destructor:proto.RaftAcceptResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftAcceptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftAcceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RaftAcceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftAcceptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&from_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftAcceptResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftAcceptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftAcceptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  // uint32 result = 4;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftAcceptResponse)
  return target;
}

size_t RaftAcceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftAcceptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  // uint32 result = 4;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftAcceptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RaftAcceptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftAcceptResponse::GetClassData() const { return &_class_data_; }

void RaftAcceptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RaftAcceptResponse *>(to)->MergeFrom(
      static_cast<const RaftAcceptResponse &>(from));
}


void RaftAcceptResponse::MergeFrom(const RaftAcceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftAcceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftAcceptResponse::CopyFrom(const RaftAcceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftAcceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftAcceptResponse::IsInitialized() const {
  return true;
}

void RaftAcceptResponse::InternalSwap(RaftAcceptResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftAcceptResponse, result_)
      + sizeof(RaftAcceptResponse::result_)
      - PROTOBUF_FIELD_OFFSET(RaftAcceptResponse, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftAcceptResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[17]);
}

// ===================================================================

class RaftCommitResponse::_Internal {
 public:
};

RaftCommitResponse::RaftCommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.RaftCommitResponse)
}
RaftCommitResponse::RaftCommitResponse(const RaftCommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&from_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.RaftCommitResponse)
}

inline void RaftCommitResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&from_)) + sizeof(result_));
}

RaftCommitResponse::~RaftCommitResponse() {
  // @@protoc_insertion_point(destructor:proto.RaftCommitResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftCommitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftCommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RaftCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftCommitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&from_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftCommitResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftCommitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftCommitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  // uint32 result = 4;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftCommitResponse)
  return target;
}

size_t RaftCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftCommitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  // uint32 result = 4;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftCommitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RaftCommitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftCommitResponse::GetClassData() const { return &_class_data_; }

void RaftCommitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RaftCommitResponse *>(to)->MergeFrom(
      static_cast<const RaftCommitResponse &>(from));
}


void RaftCommitResponse::MergeFrom(const RaftCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftCommitResponse::CopyFrom(const RaftCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCommitResponse::IsInitialized() const {
  return true;
}

void RaftCommitResponse::InternalSwap(RaftCommitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftCommitResponse, result_)
      + sizeof(RaftCommitResponse::result_)
      - PROTOBUF_FIELD_OFFSET(RaftCommitResponse, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftCommitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[18]);
}

// ===================================================================

class StatsResponse::_Internal {
 public:
};

StatsResponse::StatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.StatsResponse)
}
StatsResponse::StatsResponse(const StatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&to_, &from.to_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&to_)) + sizeof(from_));
  // @@protoc_insertion_point(copy_constructor:proto.StatsResponse)
}

inline void StatsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&to_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&to_)) + sizeof(from_));
}

StatsResponse::~StatsResponse() {
  // @@protoc_insertion_point(destructor:proto.StatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&to_)) + sizeof(from_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint64 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StatsResponse)
  return target;
}

size_t StatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsResponse::GetClassData() const { return &_class_data_; }

void StatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatsResponse *>(to)->MergeFrom(
      static_cast<const StatsResponse &>(from));
}


void StatsResponse::MergeFrom(const StatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsResponse::CopyFrom(const StatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsResponse::IsInitialized() const {
  return true;
}

void StatsResponse::InternalSwap(StatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatsResponse, from_)
      + sizeof(StatsResponse::from_)
      - PROTOBUF_FIELD_OFFSET(StatsResponse, to_)>(
          reinterpret_cast<char*>(&to_),
          reinterpret_cast<char*>(&other->to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[19]);
}

// ===================================================================

class ChangeServerStateResponse::_Internal {
 public:
};

ChangeServerStateResponse::ChangeServerStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto.ChangeServerStateResponse)
}
ChangeServerStateResponse::ChangeServerStateResponse(const ChangeServerStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&from_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.ChangeServerStateResponse)
}

inline void ChangeServerStateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&from_)) + sizeof(state_));
}

ChangeServerStateResponse::~ChangeServerStateResponse() {
  // @@protoc_insertion_point(destructor:proto.ChangeServerStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeServerStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangeServerStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeServerStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeServerStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&from_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeServerStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeServerStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeServerStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint32 target = 3;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target(), target);
  }

  // uint64 epoch_id = 4;
  if (this->_internal_epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_epoch_id(), target);
  }

  // uint32 state = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeServerStateResponse)
  return target;
}

size_t ChangeServerStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeServerStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint64 epoch_id = 4;
  if (this->_internal_epoch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch_id());
  }

  // uint32 target = 3;
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  // uint32 state = 5;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeServerStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeServerStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeServerStateResponse::GetClassData() const { return &_class_data_; }

void ChangeServerStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeServerStateResponse *>(to)->MergeFrom(
      static_cast<const ChangeServerStateResponse &>(from));
}


void ChangeServerStateResponse::MergeFrom(const ChangeServerStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeServerStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeServerStateResponse::CopyFrom(const ChangeServerStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeServerStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeServerStateResponse::IsInitialized() const {
  return true;
}

void ChangeServerStateResponse::InternalSwap(ChangeServerStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeServerStateResponse, state_)
      + sizeof(ChangeServerStateResponse::state_)
      - PROTOBUF_FIELD_OFFSET(ChangeServerStateResponse, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeServerStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fserver_2eproto_getter, &descriptor_table_proto_2fserver_2eproto_once,
      file_level_metadata_proto_2fserver_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ReplyTransactionToClient*
Arena::CreateMaybeMessage< ::proto::ReplyTransactionToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ReplyTransactionToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftRequest*
Arena::CreateMaybeMessage< ::proto::RaftRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RaftRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Ping*
Arena::CreateMaybeMessage< ::proto::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Signal*
Arena::CreateMaybeMessage< ::proto::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Signal >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LookupMasterRequest*
Arena::CreateMaybeMessage< ::proto::LookupMasterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LookupMasterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ForwardEpochRequest*
Arena::CreateMaybeMessage< ::proto::ForwardEpochRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ForwardEpochRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EpochReplicationAck*
Arena::CreateMaybeMessage< ::proto::EpochReplicationAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::EpochReplicationAck >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftPropose*
Arena::CreateMaybeMessage< ::proto::RaftPropose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RaftPropose >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftAcceptRequest*
Arena::CreateMaybeMessage< ::proto::RaftAcceptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RaftAcceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftCommitRequest*
Arena::CreateMaybeMessage< ::proto::RaftCommitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RaftCommitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StatsRequest*
Arena::CreateMaybeMessage< ::proto::StatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::StatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ChangeServerStateRequest*
Arena::CreateMaybeMessage< ::proto::ChangeServerStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ChangeServerStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftResponse*
Arena::CreateMaybeMessage< ::proto::RaftResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RaftResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Pong*
Arena::CreateMaybeMessage< ::proto::Pong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Pong >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MasterMetadata*
Arena::CreateMaybeMessage< ::proto::MasterMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MasterMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::KeyMasterMetadata*
Arena::CreateMaybeMessage< ::proto::KeyMasterMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::KeyMasterMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LookupMasterResponse*
Arena::CreateMaybeMessage< ::proto::LookupMasterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LookupMasterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftAcceptResponse*
Arena::CreateMaybeMessage< ::proto::RaftAcceptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RaftAcceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftCommitResponse*
Arena::CreateMaybeMessage< ::proto::RaftCommitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RaftCommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StatsResponse*
Arena::CreateMaybeMessage< ::proto::StatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::StatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ChangeServerStateResponse*
Arena::CreateMaybeMessage< ::proto::ChangeServerStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ChangeServerStateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
